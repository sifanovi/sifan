{"version":3,"sources":["serviceWorker.js","Components/Task/Taskform.js","Components/Task/TaskList.js","Components/Header/Header.js","Components/Task/Task.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","DialogSelect","props","useForm","criteriaMode","register","handleSubmit","errors","useState","open","setOpen","formStatus","updateFormStatus","taskName","taskname","taskDetails","taskdetails","taskStatus","taskstatus","detailsCharacterLimit","setDetailsCharacterLimit","handleClickOpen","id","fetch","then","res","json","result","data","initialLimit","length","handleClose","Dropdown","Item","onClick","Button","className","Dialog","onClose","DialogTitle","DialogContent","htmlFor","name","rows","ref","required","maxLength","value","message","onChange","event","target","defaultValue","placeholder","render","messages","Object","entries","map","type","key","DialogActions","variant","color","method","headers","body","JSON","stringify","update","Tasklist","showAlert","setAlertStatus","alertTitle","setAlertTitle","alertSeverity","setAlertseverity","onDelete","e","setTimeout","console","log","catch","err","onLabelUpdated","dataset","status","Alert","severity","style","list","index","role","substring","format","createdAt","updatedAt","Toggle","Menu","bind","data-status","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","classes","AppBar","position","Toolbar","Typography","Task","state","task","completionRatio","new","done","inProgress","active","onShow","this","setState","component","newTask","inProgressTask","doneTask","taskCount","push","arr","completedTaskPercentage","componentDidMount","Fragment","LinearProgress","React","Component","App","MainRouter","exact","path","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.6a842325.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PostAdd from '@material-ui/icons/PostAdd';\nimport Add from '@material-ui/icons/Add';\nimport Edit from '@material-ui/icons/Edit';\nimport {Dropdown} from 'react-bootstrap';\nimport {useForm} from 'react-hook-form';\nimport {ErrorMessage} from \"@hookform/error-message\";\n\n\nexport default function DialogSelect(props) {\n\n    const {register, handleSubmit, errors} = useForm({\n        criteriaMode: \"all\",\n\n    });\n\n    const [open, setOpen] = useState(false);\n    const [formStatus, updateFormStatus] = useState(false);\n    const [taskName, taskname] = useState(\"\");\n    const [taskDetails, taskdetails] = useState(\"disabled\");\n    const [taskStatus, taskstatus] = useState(\"new\");\n\n    const [detailsCharacterLimit, setDetailsCharacterLimit] = useState(500)\n\n\n    const getItem = () => {\n        fetch(\"http://localhost:3002/tasks/\" + props.id).then(function (res) {\n            return res.json();\n        }).then(function (result) {\n\n            taskname(result.data.taskName);\n            taskdetails(result.data.taskDetails);\n            taskstatus(result.data.taskStatus);\n            let initialLimit = 500 - result.data.taskDetails.length;\n            setDetailsCharacterLimit(initialLimit);\n        });\n    }\n\n    const updateTask = (id) => {\n        fetch(\"http://localhost:3002/tasks/\" + id, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                taskName: taskName,\n                taskStatus: taskStatus,\n                taskDetails: taskDetails\n            })\n        }).then(function (result) {\n            handleClose();\n            props.update();\n\n            taskname(\"\");\n            taskstatus(\"new\");\n            taskdetails(\"\");\n        });\n\n    }\n    const addTask = () => {\n\n        fetch(\"http://localhost:3002/tasks/\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                taskName: taskName,\n                taskStatus: taskStatus,\n                taskDetails: taskDetails\n            })\n        }).then(function (result) {\n            handleClose();\n            props.update();\n\n            taskname(\"\");\n            taskstatus(\"new\");\n            taskdetails(\"\");\n\n\n        });\n    }\n    const handleClickOpen = () => {\n        setOpen(true);\n        if (props.id) {\n            getItem();\n        }\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        taskname(\"\");\n        taskstatus(\"new\");\n        taskdetails(\"\");\n        updateFormStatus(false);\n\n    };\n    const onsubmit = () => {\n\n        if (props.id) {\n            handleSubmit(updateTask(props.id));\n\n        } else {\n            handleSubmit(addTask());\n\n\n        }\n    }\n    return (\n        <div>\n            {props.id ? <Dropdown.Item onClick={handleClickOpen}> Update </Dropdown.Item> :\n                <Button className=\"text-white\" onClick={handleClickOpen}> <PostAdd/> Add Task </Button>}\n            <Dialog open={open} onClose={handleClose}>\n                <DialogTitle> {props.id ? <span> <Edit/> Update Task </span> :\n                    <span> <Add/> Add Task </span>} </DialogTitle>\n                <DialogContent>\n                    <form className=\"row\">\n                        <div className=\"form-group col-sm-12 \">\n                            <div className=\"col-sm-3\">\n                                <label htmlFor=\"Task Name\"\n                                       className=\"col-form-label\">Title</label>\n                            </div>\n                            <div className=\"col-sm-9\">\n                                <textarea\n                                    name=\"title\" rows=\"5\"\n                                    ref={register({\n                                        required: \"This field is required.\",\n                                        maxLength: {\n                                            value: 30,\n                                            message: \"Write your task title within 30 characters\"\n                                        }\n                                    })}\n                                    onChange={event => {\n                                        updateFormStatus(true);\n                                        taskname(event.target.value)\n                                    }}\n                                    defaultValue={taskName}\n                                    className=\"form-control bg-transparent\"\n                                    placeholder=\"Enter name\"></textarea>\n                                <ErrorMessage\n                                    errors={errors}\n                                    name=\"title\"\n                                    render={({messages}) => {\n                                        return messages\n                                            ? Object.entries(messages).map(([type, message]) => (\n                                                <small className=\"text-danger\" key={type}>{message}</small>\n                                            ))\n                                            : null;\n                                    }}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"form-group col-sm-12\">\n                            <label htmlFor=\"Task Details\" className=\"col-sm-2 col-form-label\">Details</label>\n                            <div className=\"col-sm-9\">\n                                    <textarea\n                                        name=\"details\"\n                                        rows=\"10\"\n                                        defaultValue={taskDetails}\n                                        onChange={event => {\n                                            updateFormStatus(true);\n                                            taskdetails(event.target.value);\n                                            setDetailsCharacterLimit(500 - taskDetails.length);\n                                        }}\n                                        placeholder=\"Enter details\" className=\"form-control\"\n                                        ref={register({\n                                            required: \"This field is required.\",\n                                            maxLength: {\n                                                value: 500,\n                                                message: \"Write your details within 500 characters\"\n                                            }\n                                        })}\n                                    />\n                                <ErrorMessage\n                                    errors={errors}\n                                    name=\"details\"\n                                    render={({messages}) => {\n                                        return messages ? Object.entries(messages).map(([type, message]) => (\n                                            <small className=\"text-danger\" key={type}>{message}</small>\n                                        )) : null;\n                                    }}\n                                />\n                                <p><small>  {taskDetails.length > 0 ? detailsCharacterLimit : 500} characters\n                                    remaining</small></p>\n                            </div>\n                        </div>\n                        <div className=\"form-group col-sm-12\">\n                            <label htmlFor=\"Task Status\" className=\"col-sm-2 col-form-label\">Status</label>\n                            <div className=\"col-sm-9\">\n                                <select onChange={event => {\n                                    updateFormStatus(true);\n                                    taskstatus(event.target.value)\n                                }} className=\"form-control\"\n                                        value={taskStatus}>\n                                    <option value=\"new\">New</option>\n                                    <option value=\"inProgress\">In Progress</option>\n                                    <option value=\"done\">Done</option>\n                                </select>\n                            </div>\n                        </div>\n                    </form>\n                </DialogContent>\n                <DialogActions>\n                    {formStatus &&\n                    <div className=\"text-center\"><Button variant=\"contained\" onClick={handleClose} color=\"secondary\">\n                        Cancel\n                    </Button>\n                        <Button className=\"ml-2\" onClick={handleSubmit(onsubmit)} variant=\"contained\"\n                                color=\"primary\">{props.id ? 'Update' : 'Create'}</Button></div>}\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\n","import React , {useState} from \"react\";\nimport {Dropdown} from 'react-bootstrap';\nimport * as Icon from 'react-bootstrap-icons';\nimport Dialogue from \"./Taskform\";\nimport Moment from \"react-moment\";\nimport {Alert} from \"@material-ui/lab\";\n\nfunction Tasklist(props) {\n    const[showAlert,setAlertStatus]=useState(false);\n    const[alertTitle,setAlertTitle]=useState('');\n    const[alertSeverity,setAlertseverity]=useState('');\n\n    const onDelete = (e) => {\n        fetch(\"http://localhost:3002/tasks/\" + e.target.id, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n\n            }\n        }).then(function (result) {\n            return result.json();\n        }).then(function (result) {\n            setAlertTitle(result.message);\n            setAlertseverity(\"success\");\n            setAlertStatus(true);\n            props.update();\n            setTimeout(function () {\n                setAlertStatus(false);\n            }, 1000);\n            console.log(result.message);\n        }).catch(function (err) {\n            setAlertTitle(err);\n            setAlertseverity(\"error\");\n            setAlertStatus(true);\n            setTimeout(function () {\n                setAlertStatus(false);\n            }, 1000);\n        });\n    }\n    const onLabelUpdated = (e) => {\n\n        fetch(\"http://localhost:3002/tasks/\" + e.target.id, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n\n                taskStatus: e.target.dataset.status,\n\n            })\n        }).then(function (result) {\n            return result.json();\n        }).then(function (result) {\n            setAlertTitle(result.message);\n            setAlertseverity(\"success\");\n            setAlertStatus(true);\n            props.update();\n            setTimeout(function () {\n                setAlertStatus(false);\n            }, 1000);\n            console.log(result.message);\n        }).catch(function (err) {\n            setAlertTitle(err);\n            setAlertseverity(\"error\");\n            setAlertStatus(true);\n            setTimeout(function () {\n                setAlertStatus(false);\n            }, 1000);\n        });\n    }\n    return (\n        <div>\n\n\n            {showAlert && <div><Alert severity={alertSeverity}>{alertTitle}</Alert></div>}\n\n            <div style={{\n                            \"maxHeight\": \"500px\",\n                            \"overflowY\": \"auto\",\n                            \"overflowX\": \"hidden\",\n                            \"minHeight\": \"300px\"\n                        }}\n                 >\n            {props.list.map((value, index) => {\n                return <li key={value.id} className=\"list-group-item\">\n                    <div className=\"row\">\n                        <div className=\"col-9\">\n                            <div className=\"alert alert-heading\" role=\"alert\">\n                                <h4 className=\"alert-heading\">{value.taskName.substring(0, 13)} {value.taskName.length > 12 ? \"...\" : ''}</h4>\n                                <p>{value.taskDetails.substring(0, 50)} {value.taskDetails.length > 50 ? \"...\" : ''}</p>\n                                <p><small>Last updated at</small> {value.taskStatus === \"new\" ?\n                                    <Moment format=\"DD/MM/YYYY hh:mm A\">{value.createdAt}</Moment> :\n                                    <Moment format=\"DD/MM/YYYY hh:mm A\">{value.updatedAt}</Moment>}</p>\n\n                            </div>\n                        </div>\n                        <div className=\"col-12 pl-4\">\n                            <Dropdown className=\"col-12\">\n                                <Dropdown.Toggle className=\"col-12\">\n                                    <Icon.CardList/>\n                                </Dropdown.Toggle>\n\n                                <Dropdown.Menu>\n                                    <Dialogue update={props.update} id={value.id}/>\n                                    <Dropdown.Item className=\"bg-transparent border-0\" onClick={onDelete.bind(this)}\n                                                   id={value.id}>Delete</Dropdown.Item>\n                                    {value.taskStatus != \"inProgress\" &&\n\n                                    < Dropdown.Item className=\"bg-transparent border-0 \"\n                                                    onClick={onLabelUpdated.bind(this)}\n                                                    data-status=\"inProgress\" id={value.id}>In\n                                        Progress</Dropdown.Item>\n                                    }\n                                    {value.taskStatus != \"done\" &&\n                                    <Dropdown.Item className=\"bg-transparent border-0\"\n                                                   onClick={onLabelUpdated.bind(this)}\n                                                   data-status=\"done\" id={value.id}>Done</Dropdown.Item>\n                                    }\n                                    {value.taskStatus != \"new\" &&\n                                    <Dropdown.Item className=\"bg-transparent border-0\"\n                                                   onClick={onLabelUpdated.bind(this)}\n                                                   data-status=\"new\" id={value.id}>New</Dropdown.Item>\n                                    }\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        </div>\n                    </div>\n                </li>\n\n            })}\n            </div>\n        </div>)}\n\nexport default Tasklist;\n","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Dialogue from \"../Task/Taskform\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function Header(props) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar variant=\"elevation\" color=\"transparent\" position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Your To-do list\n                    </Typography>\n                    <Dialogue update={props.update}/>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Tasklist from \"./TaskList\";\nimport Header from \"../Header/Header\";\nimport {LinearProgress} from \"@material-ui/core\";\nimport {Alert} from \"@material-ui/lab\";\n\n\nclass Task extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            task: {\n                taskName: null,\n                taskStatus: null,\n                taskDetails: null,\n            },\n            completionRatio: null,\n            new: [],\n            done: [],\n            inProgress: [],\n            active: false,\n            showAlert:false,\n        };\n        this.onClose = this.onClose.bind(this);\n        this.onShow = this.onShow.bind(this);\n        this.update = this.update.bind(this);\n\n    }\n\n    onClose() {\n        this.setState({\n            active: false\n        });\n    }\n\n    onShow() {\n        this.setState({\n            active: true\n        });\n    }\n\n    componentDidMount() {\n        let component = this;\n        let newTask = [];\n        let inProgressTask = [];\n        let doneTask = [];\n\n        fetch(\"http://localhost:3002/tasks/\").then(function (res) {\n            return res.json();\n\n        }).then(function (result) {\n            let taskCount = result.data.length;\n\n\n            result.data.map((value, index) => {\n                if (value.taskStatus === \"new\") {\n                    newTask.push(value);\n                }\n                if (value.taskStatus === \"inProgress\") {\n                    inProgressTask.push(value);\n                }\n                if (value.taskStatus === \"done\") {\n                    doneTask.push(value);\n                }\n            });\n\n            let arr = [];\n            arr[0] = newTask;\n            arr[1] = inProgressTask;\n            arr[2] = doneTask;\n            arr[3] = taskCount;\n            return arr;\n        }).then(function (arr) {\n            let completedTaskPercentage = (arr[2].length / arr[3]) * 100;\n\n            component.setState({\n                new: arr[0],\n                inProgress: arr[1],\n                done: arr[2],\n                completionRatio: completedTaskPercentage\n            });\n\n        }).catch(function (err) {\n            console.log(err);\n        });\n    }\n    update() {\n        this.componentDidMount();\n    }\n\n    render() {\n        return (\n            <div>\n                <Header update={this.update}/>\n                <React.Fragment>  <LinearProgress style={{\"height\":\"8px\",\"color\":\"green\"}} className=\"bg-danger border-1\" variant=\"determinate\"  value={this.state.completionRatio}/> </React.Fragment>\n                <div className=\"row mt-4\">\n                    <div className=\"col-lg-4 col-md-12 col-sm-12 mb-2 md-sm-2\">\n                        <div className=\"col-12 list-group-item bg-light \">\n                            New <span style={{\"float\": \"right\"}}\n                                      className=\"badge pt-1 ml-2 badge-danger\">{this.state.new.length}</span>\n                        </div>\n                        <ul className=\"list-group\">\n                            <Tasklist update={this.update} list={this.state.new}/>\n                        </ul>\n\n                    </div>\n                    <div className=\"col-lg-4 col-md-12 col-sm-12 mb-2 md-sm-2\">\n                        <div className=\"col-12 list-group-item bg-warning \">\n                            In Progress <span style={{\"float\": \"right\"}}\n                                              className=\"badge pt-1 ml-2 badge-danger\">{this.state.inProgress.length}</span>\n                        </div>\n\n                        <ul className=\"list-group\">\n                            <Tasklist update={this.update} list={this.state.inProgress}/>\n                        </ul>\n                    </div>\n                    <div className=\"col-lg-4 col-md-12 col-sm-12  mb-2 md-sm-2\">\n                        <div className=\"col-12 list-group-item bg-success \">\n                            Done <span style={{\"float\": \"right\"}}\n                                       className=\"badge pull-right pt-1 ml-2 badge-danger\">{this.state.done.length}</span>\n                        </div>\n\n                        <ul className=\"list-group\">\n\n                            <Tasklist update={this.update} list={this.state.done}/>\n\n                        </ul>\n\n                    </div>\n                </div>\n            </div>)\n    }\n}\n\nexport default Task;\n\n\n\n\n\n","import React, {Component} from 'react';\nimport './index.css';\nimport Task from \"./Components/Task/Task\";\n\n\nclass App extends Component {\n\n\n    render() {\n\n        return (\n\n            <div>\n                <div className=\"App container\">\n                    <Task/>\n                </div>\n            </div>\n        );\n\n    }\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport App from \"./App\";\nfunction MainRouter() {\n\n    return (\n        <Router>\n            <Route exact path=\"/\" component={App}/>\n        </Router>\n    );\n};\n\nReactDOM.render(<MainRouter/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}